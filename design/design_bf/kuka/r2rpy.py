import numpy as np
import math


# Checks if a matrix is a valid rotation matrix.
def isRotationMatrix(R) :
    Rt = np.transpose(R)
    shouldBeIdentity = np.dot(Rt, R)
    I = np.identity(3, dtype = R.dtype)
    n = np.linalg.norm(I - shouldBeIdentity)
    return n < 1e-3
 
 
# Calculates rotation matrix to euler angles
# The result is the same as MATLAB except the order
# of the euler angles ( x and z are swapped ).
def rotationMatrixToEulerAngles(R) :
 
    assert(isRotationMatrix(R))
     
    sy = math.sqrt(R[0,0] * R[0,0] +  R[1,0] * R[1,0])
     
    singular = sy < 1e-6
 
    if  not singular :
        x = math.atan2(R[2,1] , R[2,2])
        y = math.atan2(-R[2,0], sy)
        z = math.atan2(R[1,0], R[0,0])
    else :
        x = math.atan2(-R[1,2], R[1,1])
        y = math.atan2(-R[2,0], sy)
        z = 0
 
    return np.array([x, y, z])


data = [
[
0.5547, -0.734694, 0.390554, 1715.070568, 0, -0.469388, -0.882992, 601, 0.83205, 0.489796, -0.260369, 552, 0, 0, 0, 1
],
[
0.5547, -0.633679, 0.53922, 1563.541011, 0, -0.648062, -0.761588, 477.256931, 0.83205, 0.422453, -0.35948, 653.019705, 0, 0, 0, 1
],
[
0.5547, -0.503095, 0.662724, 1437.65805, 0, -0.796495, -0.604644, 317.290902, 0.83205, 0.335396, -0.441816, 736.941678, 0, 0, 0, 1
],
[
0.5547, -0.349034, 0.755303, 1343.295866, 0, -0.907762, -0.419487, 128.566533, 0.83205, 0.232689, -0.503536, 799.849801, 0, 0, 0, 1
],
[
0.5547, -0.178686, 0.812637, 1284.857726, 0, -0.976668, -0.214754, -80.109637, 0.83205, 0.119124, -0.541758, 838.808561, 0, 0, 0, 1
],
[
0.5547, 0, 0.83205, 1265.070568, 0, -1, 0, -299, 0.83205, 0, -0.5547, 852, 0, 0, 0, 1
],
[
0.5547, 0.178686, 0.812637, 1284.857725, 0, -0.976668, 0.214754, -517.890358, 0.83205, -0.119124, -0.541758, 838.808562, 0, 0, 0, 1
],
[
0.5547, 0.349034, 0.755303, 1343.295867, 0, -0.907762, 0.419487, -726.566534, 0.83205, -0.232689, -0.503536, 799.849801, 0, 0, 0, 1
],
[
0.5547, 0.503095, 0.662724, 1437.658051, 0, -0.796495, 0.604644, -915.290903, 0.83205, -0.335396, -0.441816, 736.941678, 0, 0, 0, 1
],
[
0.5547, 0.633679, 0.53922, 1563.541008, 0, -0.648062, 0.761588, -1075.256928, 0.83205, -0.422453, -0.35948, 653.019707, 0, 0, 0, 1
],
[
0.5547, 0.734694, 0.390554, 1715.070568, 0, -0.469388, 0.882992, -1199, 0.83205, -0.489796, -0.260369, 552, 0, 0, 0, 1
]
]

for i in range(len(data)):
    _T = np.array(data[i]).reshape(4, 4)
    _R = _T[0:3, 0:3]
    rpy = rotationMatrixToEulerAngles(_R) * 180.0 / math.pi
    print("; this is pos {}".format(i))
    print("ROBOPOS = {{ POS: X {}, Y {}, Z {}, A {}, B {}, C {} }}".format(_T[0, 3], _T[1, 3], _T[2, 3], rpy[2], rpy[1], rpy[0]))
    print("PTP ROBOPOS")
    print(" ")

